= DMap

DMap is a generator for creating models with {DataMapper}[http://datamapper.org]. It's currently under a lot of development but I, as well as others, use it when for production use. As of right now majority of the validations work as expected and property types.

== Installation
    gem install dmapper

== Usage

As of right now the only command available is <tt>new</tt>. Here's a basic example of DMap to explain the structure...

    dmap new user id str:name str:email:required,unique str:password:required

The first, after <tt>dmap new</tt>, is the [table]. You can create multiple tables at a time by adding a comma (,). Every argument (<tt>space</tt>) is a separate [field]. Fields are divided into three sections by a colon (<tt>:</tt>). The first part is the field's [type]. The second part is the field's name, and the last part marks additional options for that field (explained later).

== Examples

Using DMap is incredibly easy once you learn the basic structure of it all. Here's a quick example...

    dmap new user id str:username str:email text:signature

Which creates (user.rb file in the folder that you're currently in)...

    class User
      include DataMapper::Resource
    
      property :signature
      property :username
      property :id
      property :email
    
    
    end

Let's get a little more "complex"

    dmap new user id str:username str:email,required str:name:required,unique str:password datetime:date_created:default=Time.now text:signature

Which produces...

    class User
      include DataMapper::Resource
    
      property :name, String, :required => true, :unique => true
      property :required, String
      property :signature, Text
      property :username, String
      property :id, Serial
      property :password, String
      property :date_created, DateTime, :default => Time.now
      property :email, String
    
    
    end

I know, still not that impressive, let's try something a tad more difficult...

    dmap new user,user_copy id str:first_name,last_name datetime:name1:default=true,length=1..5,presence_of=title-publish20..50,length_of=1,absent,confirm=field,format=email_address,primitive,unique,accessor=private str:Name1

Which creates (along with a copy model "UserCopy" of the same exact thing)

    class User
      include DataMapper::Resource
    
      property :id, Serial
      property :name1, DateTime, :default => true, :accessor => private, :unique => true, :length => 1..5
      property :last_name, String
      property :Name1, String
      property :first_name, String
    
      validates_format_of :name1, :as => :email_address 
      validates_confirmation :name1, :confirm => :field 
      validates_absence_of :name1 
      validates_length_of :name1, :equals => 1 
      validates_presence_of :name1, :within => 20..50, :when => [:title, :publish] 
      validates_primitive_type_of :name1 
    
    end

== Types

Here is a list of all the types available from DataMapper, which ones we support, and custom aliases.

<table>
[DataMapper Property Type]</td><td>[DMap Command]</td><td>[Aliases]
<tt>Boolean</tt>::<tt>Boolean</tt>::<tt>Bool</tt>
<tt>String</tt>::<tt>String</tt>::<tt>Str, S</tt>
<tt>Text</tt>::<tt>Text</tt>::<tt>Txt</tt>
<tt>Float</tt>::<tt>Float</tt>::<tt>F</tt>
<tt>Integer</tt>::<tt>Integer</tt>::<tt>Int, I</tt>
<tt>Decimal</tt>::<tt>Decimal</tt>::<tt>Dec</tt>
<tt>DateTime</tt>::<tt>DateTime</tt>::<tt>DT</tt>
<tt>Date</tt>::<tt>Date</tt>::<tt>D</tt>
<tt>Time</tt>::<tt>Time</tt>::<tt>T</tt>
<tt>Object</tt>::<tt>Object</tt>::<tt>Obj</tt>
<tt>Discriminator</tt>::<tt>Discriminator</tt>::<tt>Disc</tt>
<tt>Binary</tt>::<tt>Binary</tt>::<tt>Blob, B</tt>
</table>

More coming soon!

== Property Validators

This part belongs in the third section of the command for example:

    dmap new user id str:name:[required,accessor=private]

Each validator is separated by a comma (<tt>,</tt>) and can have a value placed within it by an equal sign (<tt>=</tt>). The property name will look like...

    property :name, String, :required => true, :accessor => :private


=== Property Validator List

[DataMapper's List]:: [DMap Command]
<tt>required</tt>:: <tt>required</tt>
<tt>default</tt>::  <tt>default</tt>
<tt>key</tt>::  <tt>key</tt>
<tt>lazy</tt>:: <tt>lazy</tt> - Only accepts "false" for now
<tt>accessor</tt>:: <tt>accessor</tt>
<tt>writer</tt>:: <tt>writer</tt>
<tt>reader</tt>:: <tt>reader</tt>

That's all the ones I know for now, let me know if there are more!

== Validations

A list of all of the validates_*_of commands and which DMap currently supports

[DataMapper's List]::   [DMap Command] [Notes]
<tt>validates_absence_of</tt>:: <tt>absence, absent</tt>
<tt>validates_acceptance_of</tt>::  <tt>acceptance, accept</tt>:: Does not accept :allow_nil options yet
<tt>validates_with_block</tt>:: </td><td>Unsupported at this time
<tt>validates_confirmation_of</tt>::  <tt>confirmation, confirm</tt>
<tt>validates_format_of</tt>::  <tt>format</tt>
<tt>validates_length_of</tt>::  <tt>length_of</tt>
<tt>validates_with_method</tt>::  <tt>withmethod, method</tt>
<tt>validates_numericality_of</tt>::  <tt>Unsupported</tt>
<tt>validates_primitive_type_of</tt>::  <tt>primitive</tt>
<tt>validates_presence_of</tt>::  <tt>presence, present</tt>
<tt>validates_uniqueness_of</tt>::  <tt>uniqueness</tt>
<tt>validates_within</tt>:: <tt>within</tt>

== To Do

* Add a verbose option
* Add a way to add/edit/remove columns from pre-existing tables
* Backup option before overwriting
* All of the misc. property types
* Better validation checkers
* Associations! (this will be done first)
* Template system similar to {Sinatra::Fedora's}[https://github.com/durango/sinatra_fedora] hatrack option
* Better documentation!
= DMap

DMap is a generator for creating models with {DataMapper}[http://datamapper.org]. It's currently under a lot of development but I, as well as others, use it for production use. DataMapper gems are not even required for this gem/tool.

"DMap a shorter way for saying, and using, DataMapper"

== Installation
    gem install dmapper

== Usage

As of right now the only command available is <tt>new</tt>. Here's a basic example of DMap to explain the structure...

    dmap new user id name:string email:str:required,unique str:password:required

The first, after <tt>dmap new</tt>, is the [table]. You can create multiple tables at a time by adding a comma (,). Every argument (<tt>space</tt>) is a separate [field]. Fields are divided into three sections by a colon (<tt>:</tt>). The first part is the field's [type]. The second part is the field's name, and the last part marks additional options for that field (explained later).

== Options

<b><tt>-b, --backup</tt></b>:: Backs up the current model files (renames them to *.rb.bk)
<b><tt>-h, --help</tt></b>::  Displays help message
<b><tt>-s, --silent</tt></b>:: If you entered incorrect values for a validation just suppress it and continue on.
<b><tt>-t, --test</tt></b>:: Displays what DMap would have made into a file onto the screen.
<b><tt>-v, --verbose</tt></b>:: Will print out the model(s) after changes have been made

== Examples

Using DMap is incredibly easy once you learn the basic structure of it all. Here's a quick example...

    dmap new user id username:str email:str signature:text

Which creates (user.rb file in the folder that you're currently in)...

    class User
      include DataMapper::Resource
    
      property :id, Serial
      property :username, String
      property :email, String
      property :signature, Text
    
    
    end

Let's get a little more "complex"

    dmap new user id username:str email:str:required name:str:required,unique password:str date_crtd:datetime:default=DateTime.now signature:text

Which produces...

    class User
      include DataMapper::Resource
    
      property :id, Serial
      property :username, String
      property :email, String, :required => true
      property :name, String, :required => true, :unique => true
      property :password, String
      property :date_crtd, DateTime, :default => proc => { DateTime.now }
      property :signature, Text
    
    
    end

I know, still not that impressive, let's try something a tad more difficult...

    dmap new user,user_copy id first_name,last_name:str name1:datetime:default=true,length=1..5,presence_of=title-publish20..50,length_of=1,absent,confirm=field,format=email_address,primitive,unique,accessor=private Name1:str

Which creates (along with a copy model "UserCopy" of the same exact thing)

    class User
      include DataMapper::Resource
    
      property :id, Serial
      property :first_name, String
      property :last_name, String
      property :name1, DateTime, :default => true, :length => 1..5, :unique => true, :accessor => :private
      property :Name1, String
    
      validates_format_of :name1, :as => :email_address 
      validates_confirmation :name1, :confirm => :field 
      validates_absence_of :name1 
      validates_length_of :name1, :equals => 1 
      validates_presence_of :name1, :within => 20..50, :when => [:title, :publish] 
      validates_primitive_type_of :name1 
    
    end

== Types

Here is a list of all the types available from DataMapper, which ones we support, and custom aliases.

<b>DataMapper Property Type</b>:: <b>DMap Command/Aliases</b>
<tt>Boolean</tt>::  <tt>boolean</tt>, <tt>bool</tt>
<tt>String</tt>:: <tt>string</tt>, <tt>str, s</tt>
<tt>Text</tt>:: <tt>text</tt>, <tt>txt</tt>
<tt>Float</tt>::  <tt>float</tt>, <tt>f</tt>
<tt>Integer</tt>::  <tt>integer</tt>, <tt>int, i</tt>
<tt>Decimal</tt>::  <tt>decimal</tt>, <tt>dec</tt>
<tt>DateTime</tt>:: <tt>datetime</tt>, <tt>dt</tt>
<tt>Date</tt>:: <tt>date</tt>, <tt>d</tt>
<tt>Time</tt>:: <tt>time</tt>, <tt>t</tt>
<tt>Object</tt>:: <tt>object</tt>, <tt>obj</tt>
<tt>Discriminator</tt>::  <tt>discriminator</tt>, <tt>disc</tt>
<tt>Binary</tt>:: <tt>binary</tt>, <tt>blob, b</tt>

More coming soon!

== Property Validators

This part belongs in the third section of the command for example:

    dmap new user id name:str:<b>required,accessor=private</b>

Each validator is separated by a comma (<tt>,</tt>) and can have a value placed within it by an equal sign (<tt>=</tt>). The property name will look like...

    property :name, String, :required => true, :accessor => :private


=== Property Validator List

<b>DataMapper's List</b>:: <b>DMap Command</b>
<tt>required</tt>:: <tt>required</tt>
<tt>default</tt>::  <tt>default</tt>
<tt>key</tt>::  <tt>key</tt>
<tt>lazy</tt>:: <tt>lazy</tt>
<tt>accessor</tt>:: <tt>accessor</tt>
<tt>writer</tt>:: <tt>writer</tt>
<tt>reader</tt>:: <tt>reader</tt>

That's all the ones I know for now, let me know if there are more!

== Validations

A list of all of the validates_*_of commands and which DMap currently supports

Note: DMap currently does not support :allow_nil parameters. This will change in the future.

<b>DataMapper's List</b>:: <b>DMap Command</b>
<tt>validates_absence_of</tt>::  <tt>absence, absent</tt>
<tt>validates_acceptance_of</tt>::  <tt>acceptance, accept</tt>
<tt>validates_with_block</tt>:: Unsupported at this time
<tt>validates_confirmation_of</tt>::  <tt>confirmation, confirm</tt>
<tt>validates_format_of</tt>::  <tt>format</tt>
<tt>validates_length_of</tt>::  <tt>length_of</tt>
<tt>validates_with_method</tt>::  <tt>withmethod, method</tt>
<tt>validates_numericality_of</tt>::  Unsupported
<tt>validates_primitive_type_of</tt>::  <tt>primitive</tt>
<tt>validates_presence_of</tt>::  <tt>presence, present</tt>
<tt>validates_uniqueness_of</tt>::  <tt>uniqueness</tt>
<tt>validates_within</tt>:: <tt>within</tt>

== Associations

<b>DataMapper Command</b>:: <b>DMap Command</b>
<tt>has 1</tt>::  <tt>has1, hasone</tt>
<tt>has n</tt>::  <tt>hasn</tt>
<tt>belongs_to</tt>:: <tt>belongs_to, belongs</tt>
<tt>has_and_belongs_to_many</tt>::  <tt>hasmany</tt>

Note: use hasn when wanting to use :through => :model and hasmany for wanting to :through => Resource

Also, conditions are <b>not</b> supported through this generator (suggestions on this could be implemented would be helpful).

== To Do

* Add a way to add/edit/remove columns from pre-existing tables
* All of the misc. property types
* Template system similar to {Sinatra::Fedora's}[https://github.com/durango/sinatra_fedora] hatrack option
* Better documentation!
* Migrations! (This will most likely be started after DM core team has finished the Veritas system).
* Conditions with associations?
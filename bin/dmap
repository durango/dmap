#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'erb'

$: << File.join(File.dirname(__FILE__), '../lib/')
require 'dmap'

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: dmap COMMAND [OPTIONS]"
  opt.separator ""
  opt.separator "Commands"
  opt.separator "     new <model name> [options]: Creates a new model"
  opt.separator "       e.g. dmap new User serial:id str:name:length=1..5,unique str:email text:signature"
  opt.separator ""

  opt.on('-h', '--help', 'Displays this screen') do
    puts opt
    exit 1
  end

  opt.on('-v', '--verbose', 'Will print out the model(s) after changes have been made') do
    DMap::Commands.options['verbose'] = true
  end

  opt.on('-b', '--backup', 'Backs up the old model from "model.rb" into "model.rb.bk"') do
    DMap::Commands.options['backup'] = true
  end

  opt.on('-t', '--test', 'Displays what DMap would have made into a file onto the screen.') do
    DMap::Commands.options['test'] = true
    DMap::Commands.options['verbose'] = true
  end

  opt.on('-s', '--silent', 'If you entered incorrect values for a validation just suppress it and continue on.') do
    DMap::Commands.options['silent'] = true
  end
end

opt_parser.parse!

if ARGV[0].nil?
  puts opt_parser
  exit 1
end

unless DMap::Commands.exists? ARGV[0]
  puts ARGV[0] + " is not a valid command."
  puts opt_parser
  exit 1
end

# safe guard table names
table_names = ARGV[1].to_s.match /^\[*([a-zA-Z0-9,_]+)\]*$/
if table_names.nil?
  puts "Invalid table name, only characters A-Z, 0-9, and _ are allowed."
  puts opt_parser
  exit 1
end

# Store all of the tables for this action
table_names[1].split(',').each do |table|
  # camelcase model name
  model_name = table.capitalize
  model_name.gsub!(/(_(.))/) { |a| a.sub('_','').upcase }
  table.downcase!

  DMap::Tables.add model_name, model_name.underscore
  File.rename("./#{table}.rb", "./#{table}.rb.bk") if File.file? "./#{table}.rb" and DMap::Commands.options['backup'] == true
  if File.file? "./#{table}.rb" and DMap::Commands.options['test'] != true
    puts "A model with the name of #{table} already exists."
    exit 1
  end
end

ARGV[2..-1].each do |command|
  # TODO: Add a shortcut module/class
  command = "id:serial" if command == "id"

  keys = command.split(':')
  keys[1] = '' if keys[1].class.name == "NilClass"

  unless DMap::Fields.list.include? keys[1] or DMap::Properties.valid? keys[1].camelcase
    puts keys[1] + " is not a valid property or field"
    puts opt_parser
    exit 1
  end

  # Check if the "command" is a key first (keys always overrule)
  if DMap::Fields.list.include?(keys[1])
    keys.unshift(DMap::Fields.list[keys[1]])
  else
    # Can't create two fields with the same name
    if DMap::Fields.list.include?(keys[0])
      puts keys[0] + " is already a declared field. You cannot declare a field twice."
      puts opt_parser
      exit 1
    end

    # We really only need to do this when we're declaring a field with a type
    # Gets proper property name (e.g. "Dt" becomes "DateTime")
    property_class = DMap::Properties.const_get(keys[1].camelcase)
    begin
      keys[1] = property_class.superclass.parent_name
    rescue
      keys[1] = keys[1].camelcase
    end

    # Allow to declare multiple fields at once
    keys[0].split(',').each do |key|
      DMap::Fields.add key, keys[1]
      DMap::Tables.list.each_value do |table|
        DMap::Properties.add table, key, keys[1], 'type'
      end
    end
  end

  # Add validations
  unless keys[2].nil?
    keys[2].split(',').each do |cmds|
      validation = cmds.split('=')

      # Does the validation exist?
      # Check if the validation belongs to the property or within it's own command
      begin
        validate = DMap::Validations.const_get validation[0].camelcase
      rescue
        validate = DMap::Associations.const_get validation[0].camelcase
      rescue
        puts "Invalid validation command " + validation[0].camelcase + " in type " + validate.class.name.to_s
        puts opt_parser
        exit 1
      end

      # Do we need a default value?
      begin
          validation[1] ||= validate.default
      rescue
      end

      # Store in variable for -s / silent option
      valid_command = validate.method("is_valid?").call validation[1]
      unless valid_command != true
        if !validate.respond_to? "property"
          # Compile all of the options for the validation
          struct = validate.method("validate").call validation[1]

          # Get the original name
          begin
            original_name = validate.superclass.parent_name.underscore
          rescue
            original_name = validation[0].underscore
          end

          # Finally, add the validations!
          if struct.is_a?(Hash) or struct.is_a? Hash
            struct.each do |key, value|
              if validate.respond_to? "associations"
                DMap::Associations.add keys[0], original_name, key, value unless value.nil? || key == :cmd
              else
                DMap::Validations.add keys[0], original_name, key, value unless value.nil? || key == :cmd
              end
            end
          end
        else
          # Add the "core" validations (on properties)
          struct = validate.method("validate").call validation[1]
          DMap::Tables.list.each do |k, table|
            validation[1] = true if validation[1].nil?
            DMap::Properties.add table, keys[0], struct, validation[0]
          end
        end
      end

      if valid_command == false
        puts validation[0] + " validation has an incorrect value for " + keys[0] + "."
        if DMap::Commands.options['silent'] != true
          puts opt_parser
          exit 1
        end
      end
    end
  end
end

# Good for debugging
#p DMap::Fields.list
#p DMap::Tables.list
#p DMap::Properties.list
#p DMap::Validations.list
#p DMap::Associations.list

DMap::Commands.method("cmd_" + ARGV[0]).call